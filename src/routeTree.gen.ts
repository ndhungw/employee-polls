/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as RouteImport } from './routes/route'
import { Route as AuthDashboardImport } from './routes/_auth/dashboard'

// Create Virtual Routes

const AuthLeaderboardLazyImport = createFileRoute('/_auth/leaderboard')()
const AuthPollsCreateLazyImport = createFileRoute('/_auth/polls/create')()

// Create/Update Routes

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const RouteRoute = RouteImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthLeaderboardLazyRoute = AuthLeaderboardLazyImport.update({
  path: '/leaderboard',
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() =>
  import('./routes/_auth/leaderboard.lazy').then((d) => d.Route),
)

const AuthDashboardRoute = AuthDashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() =>
  import('./routes/_auth/dashboard.lazy').then((d) => d.Route),
)

const AuthPollsCreateLazyRoute = AuthPollsCreateLazyImport.update({
  path: '/polls/create',
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() =>
  import('./routes/_auth/polls.create.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof RouteImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/leaderboard': {
      id: '/_auth/leaderboard'
      path: '/leaderboard'
      fullPath: '/leaderboard'
      preLoaderRoute: typeof AuthLeaderboardLazyImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/polls/create': {
      id: '/_auth/polls/create'
      path: '/polls/create'
      fullPath: '/polls/create'
      preLoaderRoute: typeof AuthPollsCreateLazyImport
      parentRoute: typeof AuthRouteImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  RouteRoute,
  AuthRouteRoute: AuthRouteRoute.addChildren({
    AuthDashboardRoute,
    AuthLeaderboardLazyRoute,
    AuthPollsCreateLazyRoute,
  }),
  LoginRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/login"
      ]
    },
    "/": {
      "filePath": "route.tsx"
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/dashboard",
        "/_auth/leaderboard",
        "/_auth/polls/create"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_auth/dashboard": {
      "filePath": "_auth/dashboard.tsx",
      "parent": "/_auth"
    },
    "/_auth/leaderboard": {
      "filePath": "_auth/leaderboard.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/polls/create": {
      "filePath": "_auth/polls.create.lazy.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
